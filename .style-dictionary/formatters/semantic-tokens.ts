import { camelCase } from 'lodash-es';
import prettier from '@prettier/sync';
import { autogeneratedComment } from '../constant';

const formatTokenValue = (token: any) => {
  if (typeof token !== 'string') return token;
  return token.replace(/{|}/g, '').split('.').slice(1).map(camelCase).join('.');
};

export const semanticTokenFormatter = {
  name: 'custom/semantic',
  format: function ({ dictionary }) {
    let output = "import { base } from './base';\n\nexport const semantic = {";
    let currentType = '';
    let currentItem = '';

    dictionary.allTokens.forEach((token) => {
      if (token.attributes.category === 'semantic tokens') {
        const { type, item } = token.attributes;

        if (currentType !== type) {
          if (currentType !== '') {
            if (currentItem !== '' && currentItem !== 'spacing') {
              output += '},';
            }
            output += '},';
          }
          currentType = type;
          output += `  ${type}: {`;
          currentItem = type === 'spacing' ? 'spacing' : '';
        }

        if (item && currentItem !== item && type !== 'spacing') {
          if (currentItem !== '') {
            output += '},';
          }
          currentItem = item;
          output += `    ${item}: {`;
        }

        const tokenLine = `${token.name}: ${formatTokenValue(
          token.original.value
        )},`;
        output += tokenLine;
      }
    });

    if (currentItem !== '' && currentItem !== 'spacing') {
      output += '}';
    }
    if (currentType !== '') {
      output += '}';
    }
    output += '};';

    return prettier.format(autogeneratedComment + output, {
      parser: 'typescript',
      singleQuote: true,
    });
  },
};
